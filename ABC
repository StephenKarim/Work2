import os
import time
from openpyxl import load_workbook
from datetime import timedelta, datetime

ignored_folders = [
    '1 CCU HANDBOOK-POLICY & OPERATING PROCEDURES',
    '1 CLASSIFIED DEBTS PROVISIONING PROCEDURE (June 2014)',
    '1 SAMPLE NAME',
    '2 DAILY REPORTING',
    '4 REPAID AND COMPROMISE',
    '5 WRITTEN OFF',
    '407'
]

def get_last_valid_date(file_path):
    try:
        workbook = load_workbook(file_path, data_only=True)
        sheet = workbook.active

        # Get the first column (index 0) and forward fill merged cells
        first_column = [cell.value for cell in sheet['A'] if cell.value is not None]
        
        last_valid_date = None
        for entry in first_column:
            if isinstance(entry, (int, float)):
                try:
                    date_value = datetime(1899, 12, 30) + timedelta(days=int(entry))
                    last_valid_date = date_value
                except Exception:
                    continue
            elif isinstance(entry, str):
                try:
                    date_value = pd.to_datetime(entry, errors='coerce', format='%Y-%m-%d')
                    if pd.isnull(date_value):
                        date_value = pd.to_datetime(entry, errors='coerce', dayfirst=False, format='%m/%d/%Y')
                    if pd.notnull(date_value):
                        last_valid_date = date_value
                except Exception:
                    continue
            elif isinstance(entry, datetime):
                last_valid_date = entry

        if last_valid_date:
            return last_valid_date + timedelta(days=56)
        else:
            return "None"  # Return "None" if no valid date found
    except PermissionError:
        return "File is open"
    except Exception as e:
        return f"Error: {e}"

def get_account_numbers(file_path):
    loan_accounts = []
    credit_card_accounts = []
    try:
        workbook = load_workbook(file_path, data_only=True)
        sheet = workbook.active
        
        # Read cells B5-B8 for loan accounts and F5-F8 for credit card accounts
        for row in range(5, 9):
            loan_cell_value = sheet[f'B{row}'].value
            credit_cell_value = sheet[f'F{row}'].value
            
            if loan_cell_value:
                loan_accounts.append(format_account_number(loan_cell_value))
            if credit_cell_value:
                credit_card_accounts.append(format_account_number(credit_cell_value))

    except Exception as e:
        print(f"Error reading account numbers from {file_path}: {e}")
    
    return "\n".join(loan_accounts) if loan_accounts else None, "\n".join(credit_card_accounts) if credit_card_accounts else None

def format_account_number(account_number):
    account_str = str(account_number).replace(" ", "")
    formatted = " ".join(account_str[i:i+4] for i in range(0, len(account_str), 4))
    return formatted

def save_with_today_date(workbook, folder_path):
    today_str = datetime.now().strftime('%Y-%m-%d')
    filename = f"{today_str} Active Follow ups.xlsx"
    full_path = os.path.join(folder_path, filename)
    workbook.save(full_path)
    print(f"Workbook saved as: {full_path}")

start_time = time.time()
search_folder = r"U:\CCU\SharedFolders\1 Debtor Correspondence\1 Debtor Correspondence"
template_path = r"C:\Users\00015221\Documents\1. Flows\Calssified Debts\Active Follow ups\Active Follow Up Template.xlsx"
save_folder = r"C:\Users\00015221\Documents\1. Flows\Calssified Debts\Active Follow ups"

workbook = load_workbook(template_path)
sheet = workbook.active

start_row = 2

for foldername in os.listdir(search_folder):
    folder_path = os.path.join(search_folder, foldername)
    if foldername in ignored_folders:
        print(f"Skipping folder: {foldername}")
        continue
    if os.path.isdir(folder_path):
        file_notes_found = False
        for filename in os.listdir(folder_path):
            if filename.lower() == "file note copy.xlsx":
                file_path = os.path.join(folder_path, filename)
                
                last_entry_value = get_last_valid_date(file_path)
                loan_accounts, credit_card_accounts = get_account_numbers(file_path)

                sheet.cell(row=start_row, column=1).value = foldername
                sheet.cell(row=start_row, column=1).hyperlink = folder_path
                sheet.cell(row=start_row, column=1).style = "Hyperlink"
                
                # Insert loan and credit card accounts into columns B and C
                sheet.cell(row=start_row, column=2).value = loan_accounts if loan_accounts else "None"
                sheet.cell(row=start_row, column=3).value = credit_card_accounts if credit_card_accounts else "None"

                # Insert last valid date in column D
                sheet.cell(row=start_row, column=4).value = last_entry_value
                
                start_row += 1
                file_notes_found = True

        if not file_notes_found:
            # Only populate the date column with "NO FILE NOTE" if no file note was found
            sheet.cell(row=start_row, column=1).value = foldername
            sheet.cell(row=start_row, column=1).hyperlink = folder_path
            sheet.cell(row=start_row, column=1).style = "Hyperlink"
            sheet.cell(row=start_row, column=4).value = "NO FILE NOTE"
            start_row += 1

save_with_today_date(workbook, save_folder)
end_time = time.time()
total_runtime = end_time - start_time
print(f"Script completed in {total_runtime:.2f} seconds.")
