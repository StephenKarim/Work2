# Function to search for terms in a specific Excel file
def process_excel_file(file_path, search_terms_per_file):
	all_results = []
	try:
		if file_path.endswith(('.xlsx', '.xlsm')):
			excel_data = pd.read_excel(file_path, sheet_name=None, engine='openpyxl')	
		else:
			excel_data = pd.read_excel(file_path, sheet_name=None, engine='xlrd')	
		for sheet_name, sheet_data in excel_data.items():
			cleaned_search_terms = {term_name: clean_string(str(term_value).lower()) for
			term_name, term_value in search_terms_per_file[file_path].get(sheet_name, {}).items()}
			headers = list(sheet_data.columns)
			for index, row in sheet_data.iterrows():
				found_terms = set()
				matched_values = {}
				for term_name, term_value_str in cleaned_search_terms.items():
					if any(term_value_str in clean_string(str(cell).lower()) for cell in row):
						found_terms.add(term_name)
						matched_values[term_name] = term_value_str
				if len(found_terms) >= 2:
					result = {
						"Matched Terms": ', '.join(found_terms),  # Add matched terms here
						"File": file_path,
						"File Name": os.path.basename(file_path), # Adding file name here
						"Sheet": sheet_name,
						"Row Number": index + 1,
						"Headers": headers,
						"Row Data": row.to_dict()
					}
					all_results.append(result)
	except Exception as e:
		logging.error(f"Error processing {file_path}: {e}")
	return all_results

# Writing matched terms and other info to Excel
# Prepare for writing to Excel
workbook = Workbook()
sheet = workbook.active
sheet.title = "Results"

# Add headers for file, sheet, and row
sheet.append(["Matched Terms", "File", "Sheet", "Row", "-------", "Row Data"])

# Define styles
header_fill = PatternFill(start_color="0033A0", end_color="0033A0", fill_type="solid") # Dark blue for headers
data_fill = PatternFill(start_color="D3D3D3", end_color="D3D3D3", fill_type="solid") # Light gray for data
header_font = Font(bold=True, color="FFFFFF")

# Define borders
thin_border = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style= 'thin'), bottom=Side(style='thin'))

# Freeze top row for better navigation
sheet.freeze_panes = "A2"

# Write data with formatting, starting from Column D, without "Headers" or "Row Data" labels
for idx, result in enumerate(all_results):
	row_fill = header_fill if idx % 2 == 0 else data_fill

	# Write the actual headers and data without labels
	row_num = sheet.max_row + 1
	sheet.append([result["Matched Terms"], result["File Name"], result["Sheet"], result["Row Number"], ""] + result["Headers"])

	# Add hyperlink to the file path
	sheet.cell(row=row_num, column=2).hyperlink = result["File"] # Adds hyperlink to cell with the file name
	sheet.cell(row=row_num, column=2).value = result["File Name"] # Ensures cell shows the file name

	for col_num in range(6, len(result["Headers"]) + 6):
		cell = sheet.cell(row=row_num, column=col_num)
		cell.fill = header_fill
		cell.font = header_font        
		cell.border = thin_border # Add borders
        
	# Write the data row starting from Column D
	row_num = sheet.max_row + 1
	sheet.append(["", "", "", "", ""] + list(result["Row Data"].values()))
	for col_num in range(6, len(result["Row Data"].values()) + 6):
		cell = sheet.cell(row=row_num, column=col_num)
		cell.fill = data_fill
		cell.border = thin_border # Add borders

# Adjust column widths for better readability
for col in sheet.columns:
	max_length = 0
	column = col[0].column_letter
	for cell in col:
		try:
			if len(str(cell.value)) > max_length:
				max_length = len(cell.value)
		except:
			pass
	adjusted_width = (max_length + 2) if max_length < 30 else 30
	sheet.column_dimensions[column].width = adjusted_width

# Save the workbook
current_time = datetime.now().strftime("%Y-%m-%d %H-%M-%S")
output_file = f"{current_time} Search_results.xlsx"
workbook.save(output_file)

# Updated clean print statements for search terms and file paths
print(f"Search Terms: First Name: {new_search_terms['first_name']}, Last Name: {new_search_terms['last_name']}, ID: {new_search_terms['id']}, DOB: {new_search_terms['dob']}, AC No.: {new_search_terms['ac_no']}, Phone: {new_search_terms['phone']}")
print(f"Files: {[os.path.basename(path) for path in local_file_paths]}")

# End the timer and calculate the total runtime
end_time = time.time()
total_runtime = end_time - start_time

print(f"Total search complete. Results saved to {output_file}")
print(f"Total Runtime: {total_runtime:.2f} seconds")

