import os
import time
import pandas as pd
from openpyxl import load_workbook
from datetime import timedelta, datetime
import xlrd

ignored_folders = [
    '1 CCU HANDBOOK-POLICY & OPERATING PROCEDURES',
    '1 CLASSIFIED DEBTS PROVISIONING PROCEDURE (June 2014)',
    '1 SAMPLE NAME',
    '2 DAILY REPORTING',
    '4 REPAID AND COMPROMISE',
    '5 WRITTEN OFF',
    '407'
]

def get_last_valid_date(file_path):
    try:
        if file_path.endswith('.xls'):
            df = pd.read_excel(file_path, engine='xlrd')
        else:
            df = pd.read_excel(file_path, engine='openpyxl')
        
        first_column = df.iloc[:, 0].ffill().tolist()
        last_valid_date = None
        for entry in first_column:
            if isinstance(entry, (int, float)):
                try:
                    date_value = datetime(1899, 12, 30) + timedelta(days=int(entry))
                    last_valid_date = date_value
                except Exception:
                    continue
            elif isinstance(entry, str):
                try:
                    date_value = pd.to_datetime(entry, errors='coerce', format='%Y-%m-%d')
                    if pd.isnull(date_value):
                        date_value = pd.to_datetime(entry, errors='coerce', dayfirst=False, format='%m/%d/%Y')
                    if pd.notnull(date_value):
                        last_valid_date = date_value
                except Exception:
                    continue
            elif isinstance(entry, (pd.Timestamp, datetime)):
                last_valid_date = entry

        if last_valid_date:
            return last_valid_date + timedelta(days=56)
        else:
            return "None"  # Return "None" if no valid date found
    except PermissionError:
        return "File is open"
    except ValueError as e:
        if 'encrypted' in str(e).lower():
            return "File is encrypted"
        else:
            return "Error"
    except xlrd.biffh.XLRDError as e:
        if 'Workbook is encrypted' in str(e):
            return "File is encrypted"
        else:
            return "Error"
    except Exception as e:
        return "Error"

def get_account_numbers(file_path):
    loan_accounts = []
    credit_card_accounts = []
    try:
        if file_path.endswith('.xls'):
            df = pd.read_excel(file_path, engine='xlrd')
        else:
            df = pd.read_excel(file_path, engine='openpyxl')

        # Define ranges for loan and credit card cells
        loan_ranges = ['B5', 'B6', 'B7', 'B8']
        credit_ranges = ['F5', 'F6', 'F7', 'F8']

        # Check loan account cells with fallback to adjacent column
        for cell in loan_ranges:
            row = int(cell[1:]) - 1
            loan_value = df.iloc[row, 1] if pd.notnull(df.iloc[row, 1]) else df.iloc[row, 2]  # Check B first, then C
            if pd.notnull(loan_value):
                loan_accounts.append(format_account_number(loan_value))

        # Check credit card account cells with fallback to adjacent column
        for cell in credit_ranges:
            row = int(cell[1:]) - 1
            credit_value = df.iloc[row, 5] if pd.notnull(df.iloc[row, 5]) else df.iloc[row, 6]  # Check F first, then G
            if pd.notnull(credit_value):
                credit_card_accounts.append(format_account_number(credit_value))

    except Exception as e:
        print(f"Error reading account numbers from {file_path}: {e}")
    
    return "\n".join(loan_accounts) if loan_accounts else "None found", "\n".join(credit_card_accounts) if credit_card_accounts else "None found"

def format_account_number(account_number):
    account_str = str(account_number).replace(" ", "")
    formatted = " ".join(account_str[i:i+4] for i in range(0, len(account_str), 4))
    return formatted

def save_with_today_date(workbook, folder_path):
    today_str = datetime.now().strftime('%Y-%m-%d')
    filename = f"{today_str} Active Follow ups.xlsx"
    full_path = os.path.join(folder_path, filename)
    workbook.save(full_path)
    print(f"Workbook saved as: {full_path}")

start_time = time.time()
search_folder = r"U:\CCU\SharedFolders\1 Debtor Correspondence\1 Debtor Correspondence"
template_path = r"C:\Users\00015221\Documents\1. Flows\Calssified Debts\Active Follow ups\Active Follow Up Template.xlsx"
save_folder = r"C:\Users\00015221\Documents\1. Flows\Calssified Debts\Active Follow ups"

workbook = load_workbook(template_path)
sheet = workbook.active

start_row = 2

for foldername in os.listdir(search_folder):
    folder_path = os.path.join(search_folder, foldername)
    if foldername in ignored_folders:
        print(f"Skipping folder: {foldername}")
        continue
    if os.path.isdir(folder_path):
        file_notes_found = False
        for filename in os.listdir(folder_path):
            if 'file note' in filename.lower() and (filename.endswith('.xls') or filename.endswith('.xlsx')):
                file_path = os.path.join(folder_path, filename)
                
                last_entry_value = get_last_valid_date(file_path)
                loan_accounts, credit_card_accounts = get_account_numbers(file_path)

                sheet.cell(row=start_row, column=1).value = foldername
                sheet.cell(row=start_row, column=1).hyperlink = folder_path
                sheet.cell(row=start_row, column=1).style = "Hyperlink"
                
                # Insert loan and credit card accounts into columns B and C
                sheet.cell(row=start_row, column=2).value = loan_accounts
                sheet.cell(row=start_row, column=3).value = credit_card_accounts

                # Insert last valid date in column D
                sheet.cell(row=start_row, column=4).value = last_entry_value
                
                start_row += 1
                file_notes_found = True

        if not file_notes_found:
            sheet.cell(row=start_row, column=1).value = foldername
            sheet.cell(row=start_row, column=1).hyperlink = folder_path
            sheet.cell(row=start_row, column=1).style = "Hyperlink"
            sheet.cell(row=start_row, column=2).value = "None found"  # Set "None found" if no notes were found in the folder
            start_row += 1

save_with_today_date(workbook, save_folder)
end_time = time.time()
total_runtime = end_time - start_time
print(f"Script completed in {total_runtime:.2f} seconds.")
