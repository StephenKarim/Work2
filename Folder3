from pathlib import Path

# Function definition
def search_folders(directory, first_name_dict, last_name_dict, max_depth=3):
    """
    Search for folders based on first and last name dictionary values in a directory with recursive search limited to 3 levels deep.
    Skips symbolic links to avoid infinite loops.
    
    Parameters:
    - directory: Base directory to search within.
    - first_name_dict: Dictionary with first names to search for.
    - last_name_dict: Dictionary with last names to search for.
    - max_depth: Maximum depth for recursive search (default is 3).
    
    Returns:
    - List of folders that match any value in the first and last name dictionaries.
    """
    results = []
    base_path = Path(directory)

    if base_path.is_dir():
        # Perform recursive search with manual depth control
        for subfolder in base_path.rglob('*'):
            # Skip symbolic links to prevent circular traversal
            if subfolder.is_symlink():
                continue

            # Calculate the relative depth of the folder
            relative_depth = len(subfolder.relative_to(base_path).parts)  # Get the depth relative to base_path
            if subfolder.is_dir() and relative_depth <= max_depth:
                # Check if any values from the first_name_dict and last_name_dict are in the folder name
                if any(value.lower() in subfolder.name.lower() for value in first_name_dict.values()) and \
                   any(value.lower() in subfolder.name.lower() for value in last_name_dict.values()):
                    results.append(subfolder)

    return results

# Example usage
if __name__ == "__main__":
    base_directory = "C:/path/to/base/directory"  # Update with your base directory

    # Example dictionaries
    first_name_dict = {'1': 'John', '2': 'Jane'}
    last_name_dict = {'1': 'Doe', '2': 'Smith'}

    matching_folders = search_folders(base_directory, first_name_dict, last_name_dict)

    for folder in matching_folders:
        print(folder)
